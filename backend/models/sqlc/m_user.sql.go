// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: m_user.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAllUser = `-- name: GetAllUser :many
SELECT uuid, name, password, email, created_at, updated_at FROM m_user
ORDER BY id
`

func (q *Queries) GetAllUser(ctx context.Context) ([]MUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MUser
	for rows.Next() {
		var i MUser
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT uuid, name, password, email, created_at, updated_at FROM m_user
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (MUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i MUser
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT uuid, name, password, email, created_at, updated_at FROM m_user
WHERE uuid = $1
`

func (q *Queries) GetUserByUUID(ctx context.Context, uuid uuid.UUID) (MUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByUUID, uuid)
	var i MUser
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const register = `-- name: Register :one
INSERT INTO m_user (name,password,email,updated_at)
VALUES ($1,$2,$3,$4)
RETURNING uuid, name, password, email, created_at, updated_at
`

type RegisterParams struct {
	Name      string    `json:"name"`
	Password  string    `json:"password"`
	Email     string    `json:"email"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) (MUser, error) {
	row := q.db.QueryRowContext(ctx, register,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.UpdatedAt,
	)
	var i MUser
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
